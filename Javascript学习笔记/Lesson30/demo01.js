var a = new Array(10000).join("*")
/**
 * 内存的生命周期
 *  分配你所需要的内存
    使用分配到的内存（读、写）
    不需要时将其释放\归还

    js在定义变量时就完成了分配内存
 */
// 垃圾回收机制
// 1.引用机制  在内存管理的环境中，一个对象如果有访问另一个对象的权限，显式或者隐式，叫做一个对象引用另一个对象
//  显示引用  一个js对象具有对它自身属性的引用
// 隐式引用 一个js对象 具有对它原型的引用
//  引用计数垃圾回收机制
//  这是最初的垃圾回收机制，此算法把 对象是否不再需要 定义为 对象有没有被其他对象引用，如果没有引用指向该对象（零引用），
// 对象将被垃圾回收机制回收

// 限制： 循环引用 无法处理循环引用的事例。
function f(){
    var o = {};
    var o2 = {};
    o.a = o2; // o 引用 o2
    o2.a = o; // o2 引用 o
  
    return "azerty";
  }
  // o与o2循环引用 引用计数算法 考虑到它们互相都有至少一次引用
  f();

  // 改进： 标记-清除算法
  /**
   * 
    这个算法把对象是否不再需要定义为对象是否可以获得
    这个算法 假定有一个根对象  在js中，根对象是全局对象。垃圾回收机制将定期从根开始
    找所有从根开始引用的对象，然后找这些对象引用的对象
    从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象

   */